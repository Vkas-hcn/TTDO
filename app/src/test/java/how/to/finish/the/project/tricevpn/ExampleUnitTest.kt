package how.to.finish.the.project.tricevpn

import org.junit.Test
import java.util.Base64

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        dropReversed()
//        mainTest()
    }
    val dataBase = """
        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
    """.trimIndent()
    fun dropReversed(){
        val trimmedString = dataBase.drop(8)
//        val reversedString = dataBase.reversed()
        val data = String(Base64.getDecoder().decode(trimmedString?.toByteArray()))
        println("data======"+data)
    }
    fun mainTest() {
        var base64Str = dataBase

        // 添加填充字符（如果必要）
        val length = base64Str.length
        val pad = length % 4
        if (pad != 0) {
            for (i in 0 until 4 - pad) {
                base64Str += "="
            }
        }
        try {
            val reversedString = base64Str.reversed()

            val decodedBytes = Base64.getDecoder().decode(reversedString)
            println("Decoded byte array: " + String(decodedBytes))
        } catch (e: IllegalArgumentException) {
            println("Error: " + e.message)
        }
    }
}